#!/usr/bin/bash

#############################################################################
##     ______  _                _  _______         _                 _     ##
##    (_____ \(_)              | |(_______)       | |               | |    ##
##     _____) )_  _   _  _____ | | _    _   _   _ | |__   _____   __| |    ##
##    |  ____/| |( \ / )| ___ || || |  | | | | | ||  _ \ | ___ | / _  |    ##
##    | |     | | ) X ( | ____|| || |__| | | |_| || |_) )| ____|( (_| |    ##
##    |_|     |_|(_/ \_)|_____) \_)\______)|____/ |____/ |_____) \____|    ##
##                                                                         ##
#############################################################################
#############################################################################
##                                                                         ##
## __     ___	  _________                 ____  _____     ____  ____     ##
##|  \   /  /    |___   ___|        '"'    |    \\   _ \   |   \  /   |    ##
## \  \_/  /_-''-_   | |     /\     | |    |  _  \\ \ \ \  |    \/    |    ##
##  \     //  ^^  \  | |    /  \    | |    | | |  \\ \ \ \ |          |    ##
##   \   //  ______\ | |   / ^^ \   | |    | | |  / \ ""  \|   _  _   |    ##
##   /  //  /    __  | |  /  __  \  | |    | |_| /   '"'"'"|  / \/ \  |    ##
##  /  / \  \___/ /  | | /  /  \  \ | |__..|    /         /  /      \  \   ##
## /__/   \______/   '"'/__/    \__\|_____||___/         /__/        \__\  ##
##									   ##
#############################################################################
###################### Credits ###################### ### Update PCI ID'S ###
## Lily (PixelQubed) for editing the scripts       ## ##                   ##
## RisingPrisum for providing the original scripts ## ##   update-pciids   ##
## Void for testing and helping out in general     ## ##                   ##
## .Chris. for testing and helping out in general  ## ## Run this command  ##
## WORMS for helping out with testing              ## ## if you dont have  ##
##################################################### ## names in you're   ##
## The VFIO community for using the scripts and    ## ## lspci feedback    ##
## testing them for us!                            ## ## in your terminal  ##
##################################################### #######################

################################# Variables #################################

## Adds current time to var for use in echo for a cleaner log and script ##
DATE=$(date +"%m/%d/%Y %R:%S :")

## Sets dispmgr var as null ##
DISPMGR="null"

################################## Script ###################################

echo "$DATE Beginning of Startup!"

## Functions
function stop_display_manager_if_running {
    ## Check if in use ##
    if [[ -x /run/systemd/system ]] && echo "$DATE Distro is using Systemd"; then
       ## Set DP to GDM, Im ubuntu
        DISPMGR="gdm"
        echo "$DATE Display Manager = $DISPMGR"

        ## Stop display manager using systemd ##
        if systemctl is-active --quiet "$DISPMGR"; then
           ## Log to a file
            grep -qsF "$DISPMGR" "/tmp/vfio-store-display-manager" || echo "$DISPMGR" >/tmp/vfio-store-display-manager
           ## Stop GDM
            systemctl stop "$DISPMGR"
	   ## Switch to multi user target (non-graphical)
            systemctl isolate multi-user.target
	else
	    echo "$DATE $DISPMGR is not running."
	fi
	## Wait until display fully stopped
        while systemctl is-active --quiet "$DISPMGR"; do
            sleep "1"
        done

        echo "$DATE $DISPMGR stopped!"

    fi

}

## Start the process
stop_display_manager_if_running

sleep "1"

##############################################################################################################################
## Unbind VTconsoles if currently bound (adapted and modernised from https://www.kernel.org/doc/Documentation/fb/fbcon.txt) ##
################################################################################################################
# Remove temporary vfio-bound consoles if present
if [ -e "/tmp/vfio-bound-consoles" ]; then
    rm -f /tmp/vfio-bound-consoles
    echo "Removed temp VFIO Consoles"
else
    echo "No temp VFIO consoles to remove"
fi
## Unbind vtconsoles consoles
for (( i = 0; i < 16; i++))
do
  if test -x /sys/class/vtconsole/vtcon"${i}"; then
      if [ "$(grep -c "frame buffer" /sys/class/vtconsole/vtcon"${i}"/name)" = 1 ]; then
	       echo 0 > /sys/class/vtconsole/vtcon"${i}"/bind
           echo "$DATE Unbinding Console ${i}"
      fi
  fi
done

# Display Manager was disable and host was switched to non graphical state in the first function
# VT consoles where unbinded
# The only framebuffer I have in my system is fb0
# Has nothing else is using this framebuffer and the vm is working smoothly we'll pass this step
# Future actions may change this....
# We still log the framebuffer check :D

# Check if there is any framebuffer device (fb0)
if [ -e /dev/fb0 ]; then
    echo "$DATE Framebuffer (fb0) Check"
    # Unbind the framebuffer device from the system
##    echo -n "simple-framebuffer" > /sys/class/graphics/fb0/device/driver/unbind
fi

sleep "1"

##################################################################################################
## NVIDIA Drivers and VFIO Drivers

if lspci -nn | grep -e VGA | grep -s NVIDIA ; then
    echo "$DATE System has an NVIDIA GPU"
    grep -qsF "true" "/tmp/vfio-is-nvidia" || echo "true" >/tmp/vfio-is-nvidia

    ## Unload NVIDIA GPU drivers ##
    modprobe -r nvidia_uvm
    modprobe -r nvidia_drm
    modprobe -r nvidia_modeset
    modprobe -r nvidia
    modprobe -r i2c_nvidia_gpu
   ## modprobe -r drm_kms_helper
   ## modprobe -r drm

    echo "$DATE NVIDIA GPU Drivers Unloaded"
fi

# Unbind the device from the host
##echo 1532 02a2 > sudo tee /sys/bus/usb/drivers/usb/unbind ## I never had this working... Works fine without passthrough
## We may need to use the sudo tee after a redirection > sudo tee to make sure it has sudo privilege
##echo "Unbind USB"

## Load VFIO-PCI driver ##
modprobe vfio
modprobe vfio_pci
modprobe vfio_iommu_type1

echo "$DATE End of Startup!"
